public class Bullet :
{
    protected Character attacker;
    protected Action<Character attacker, Character victim> onHit;
    // set bullet data for bullet
    public virtual void OnInit(Character attacker, Action<Character attacker, Character victim> onHit)
    {
        this.attacker = attacker;
        this.onHit = onHit;
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag(Constant.TAG_CHARACTER))
        {
            Character victim = Cache.GetCharacter(other);
            onHit?.Invoke(attacker,victim);
        }
    }
}
 
public class Weapon : 
{

    public void Throw(Character character, Action<Character attacker, Character victim> onHit)
    {
        Bullet bullet = LeanPool.Spawn(bullet);
        bullet.OnInit(character, onHit);
    }

}
 
public class Character :
{
    public void Throw()
    {
        currentSkin.Weapon.Throw(this, OnHitVictim);
    }
    // Logic when bullet hit victim
    protected virtual OnHitVictim(Character attacker, Character victim)
    {
        victim.DoDead();
        .....
    }

}